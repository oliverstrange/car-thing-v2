import { VerticalBox } from "std-widgets.slint";
import { TimeDisplay } from "../components/TimeDisplay.slint";

export component LapTimer {
    width: 240px;
    height: 240px;

    property <int> seconds: 0;

    callback start_stop();
    callback reset();

    timer := Timer {
        interval: 1s;
        running: false;
        triggered() => {
            seconds += 1;
        }
    }

    start_stop() => {
        debug("Timer startstop called");
        if (timer.running) {
            timer.running = false;
        }
        else {
            timer.running = true;
        }
        time_display.start_stop_blinking();
    }

    reset() => {
        if (!timer.running) {
            time_display.start_stop_blinking();
            seconds = 0;
        }
    }


    Rectangle {
        clip: false;
        height: 50px;
        width: 200px;
        border-radius: 17px;
        background: #6771ff;

        time_display := TimeDisplay {
            seconds: seconds;
        }
    }

    bgpath:= Path {
        stroke: #7a7a7a;
        stroke-width: 10px;

        private property <float> radius: min(self.viewbox-width, self.viewbox-height) / 2 + 10;
        private property <float> start-x: self.viewbox-width / 2;
        private property <float> start-y: self.viewbox-height / 2;

        private property <float> progress: 0.999999;

        viewbox-width: 100;
        viewbox-height: 80;
        width: 100%;
        height: 100%;

        MoveTo {
            x: start-x + radius * sin(360deg);
            y: start-y + radius * cos(360deg);
        }

        ArcTo {
            radius-x: bgpath.radius;
            radius-y: bgpath.radius;
            x: start-x + bgpath.radius * sin(-(bgpath.progress) * 360deg);
            y: start-y + bgpath.radius * cos(-(bgpath.progress) * 360deg);
            sweep: bgpath.progress > 0;
            large-arc: bgpath.progress > 0.5;
        }
    }

    // Moving timer Path
    path := Path {
        stroke: #26ccfa;
        stroke-width: 10px;

        private property <float> radius: min(self.viewbox-width, self.viewbox-height) / 2 + 10;
        private property <float> start-x: self.viewbox-width / 2;
        private property <float> start-y: self.viewbox-height / 2;

        private property <float> progress: Math.mod(seconds, 60) / 60;
        animate progress {
            duration: 200ms;
            easing: linear;
        }

        viewbox-width: 100;
        viewbox-height: 80;
        width: 100%;
        height: 100%;

        MoveTo {
            x: start-x + radius * sin(360deg);
            y: start-y + radius * cos(360deg);
        }

        ArcTo {
            radius-x: path.radius;
            radius-y: path.radius;
            x: start-x + path.radius * sin(-(path.progress) * 360deg);
            y: start-y + path.radius * cos(-(path.progress) * 360deg);
            sweep: path.progress > 0;
            large-arc: path.progress > 0.5;
        }
    }

}
